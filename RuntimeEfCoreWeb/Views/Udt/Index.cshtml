@using Microsoft.EntityFrameworkCore.Metadata
@model IEnumerable<dynamic>
@{
    ViewData["Title"] = "Index";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<link href="~/lib/bootstrap/dist/css/bootstrap.min.css" rel="stylesheet" />
<script src="~/lib/jquery/dist/jquery.min.js"></script>
<script src="~/lib/bootstrap/dist/js/bootstrap.min.js"></script>
<div class="row">
    <div class="col-6"> <button class="btn btn-outline-primary" id="btnAdd">Ekle</button></div>
    
</div>
<div class="row mt-4">
    <table class="table table-bordered" style="table-layout: fixed; width: 100%;">
        <thead>
            <tr>
                @foreach (var prop in Model.FirstOrDefault()?.GetType().GetProperties() ?? new System.Reflection.PropertyInfo[0])
                {
                    if (!typeof(System.Collections.IEnumerable).IsAssignableFrom(prop.PropertyType) || prop.PropertyType == typeof(string))
                    {
                        <th>@prop.Name</th>
                    }
                }
                <th style="min-width:170px; max-width:180px; width: 180px;">İşlemler</th>

            </tr>
        </thead>
        <tbody>
            @foreach (var item in Model)
            {
                <tr>
                    @foreach (var prop in item.GetType().GetProperties())
                    {
                        if (!typeof(System.Collections.IEnumerable).IsAssignableFrom(prop.PropertyType) || prop.PropertyType == typeof(string))
                        {
                            <td>@prop.GetValue(item)</td>
                        }

                    }
                    <td style="min-width:170px; max-width:180px; width: 180px;">
                        <button class="btn btn-warning"> Güncelle</button>
                        <button class="btn btn-danger" style="float:right;margin-left:10px"> Sil</button>
                    </td>
                </tr>

            }
        </tbody>
    </table>

</div>


<!-- Modal -->
<div class="modal fade" id="entityModal" tabindex="-1" aria-labelledby="entityModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="entityModalLabel">Yeni Kayıt</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="entityForm">
                    <!-- Dinamik inputlar buraya eklenecek -->
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Kapat</button>
                <button type="button" class="btn btn-primary" id="btnSave">Kaydet</button>
            </div>
        </div>
    </div>
</div>


<script>
        $(document).ready(function () {
        const apiUrl = "http://localhost:5295/api/Metadata";
        const entityName = "@Model.FirstOrDefault()?.GetType().Name"; // Entity Name alınır

        // Ekle butonuna tıklandığında modal açılır
        $("#btnAdd").click(function () {
            // Modal inputlarını temizle
            $("#entityForm").empty();

            // Dinamik olarak inputları oluştur
                const columns = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(
                        ((System.Reflection.PropertyInfo[])Model.FirstOrDefault()?.GetType().GetProperties())
                        .Where(p => !typeof(System.Collections.IEnumerable).IsAssignableFrom(p.PropertyType) ||               p.PropertyType == typeof(string))
                        .Select(p => new { Name = p.Name, Type = p.PropertyType.Name })
                    ));

            columns.forEach(column => {
                if (column.Name.toLowerCase() !== "id") { // ID alanını hariç tut
                    let inputType = "text";
                    let className ="form-control";
                    console.log(column.Type.toLowerCase());
                    // Tip kontrolü ve uygun input tipi belirleme
                    switch (column.Type.toLowerCase()) {
                        case "int32":
                        case "int64":
                        case "decimal":
                            inputType = "number";
                            break;
                        case "datetime":
                            inputType = "date";
                            break;
                        case "boolean":
                            inputType = "checkbox";
                            className="";
                            break;
                        default:
                            inputType = "text";
                    }

                    $("#entityForm").append(`
                        <div class="mb-3">
                            <label for="${column.Name}" class="form-label">${column.Name}</label>
                            <input type="${inputType}" class="${className}" id="${column.Name}" name="${column.Name}">
                        </div>
                    `);
                }
            });

            // Modal göster
            $("#entityModal").modal("show");
        });

        // Kaydet butonuna tıklandığında AJAX isteği gönderilir
        $("#btnSave").click(function () {
            const formData = {};

            // Formdaki inputları oku
            $("#entityForm")
                .find("input")
                .each(function () {
                    const name = $(this).attr("name");
                    const value =
                        $(this).attr("type") === "checkbox"
                            ? $(this).is(":checked")
                            : $(this).val();

                    formData[name] = value;
                });

            // AJAX POST isteği
            $.ajax({
                url: `${apiUrl}/${entityName}`,
                type: "POST",
                contentType: "application/json",
                data: JSON.stringify(formData),
                success: function (response) {
                    alert("Kayıt başarıyla eklendi!");
                    location.reload(); // Sayfayı yeniden yükle
                },
                error: function (error) {
                    alert("Bir hata oluştu!");
                    console.error(error);
                },
            });
        });
    });

</script>